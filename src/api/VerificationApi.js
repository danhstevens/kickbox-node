/**
 * Kickbox
 * Kickbox API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.12-1
 *
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiError', 'model/BalanceResponse', 'model/VerifyBatchResponse', 'model/VerifyBatchStatusResponse', 'model/VerifyResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiError'), require('../model/BalanceResponse'), require('../model/VerifyBatchResponse'), require('../model/VerifyBatchStatusResponse'), require('../model/VerifyResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Kickbox) {
      root.Kickbox = {};
    }
    root.Kickbox.VerificationApi = factory(root.Kickbox.ApiClient, root.Kickbox.ApiError, root.Kickbox.BalanceResponse, root.Kickbox.VerifyBatchResponse, root.Kickbox.VerifyBatchStatusResponse, root.Kickbox.VerifyResponse);
  }
}(this, function(ApiClient, ApiError, BalanceResponse, VerifyBatchResponse, VerifyBatchStatusResponse, VerifyResponse) {
  'use strict';

  /**
   * Verification service.
   * @module api/VerificationApi
   * @version 3.0.0
   */

  /**
   * Constructs a new VerificationApi. 
   * @alias module:api/VerificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Credit Balance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BalanceResponse} and HTTP response
     */
    this.balanceWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BalanceResponse;

      return this.apiClient.callApi(
        '/balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Credit Balance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BalanceResponse}
     */
    this.balance = function() {
      return this.balanceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Verify
     * @param {String} email The email address to be verified, URL encoded.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timeout Maximum time, in milliseconds, to allow the API to complete a verification request.  (default to 6000)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyResponse} and HTTP response
     */
    this.verifyWithHttpInfo = function(email, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling verify");
      }


      var pathParams = {
      };
      var queryParams = {
        'email': email,
        'timeout': opts['timeout'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VerifyResponse;

      return this.apiClient.callApi(
        '/verify', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Verify
     * @param {String} email The email address to be verified, URL encoded.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timeout Maximum time, in milliseconds, to allow the API to complete a verification request.  (default to 6000)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyResponse}
     */
    this.verify = function(email, opts) {
      return this.verifyWithHttpInfo(email, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Verify up to 1 million email addresses with one API call
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.xKickboxCallback If a valid URL is specified, Kickbox will send a HTTP **POST**  containing the results of the job to it when the batch verification completes.
     * @param {String} opts.xKickboxFilename The file containing your results will have the specified name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyBatchResponse} and HTTP response
     */
    this.verifyBatchWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Kickbox-Callback': opts['xKickboxCallback'],
        'X-Kickbox-Filename': opts['xKickboxFilename']
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['text/plain', 'text/csv'];
      var accepts = ['application/json'];
      var returnType = VerifyBatchResponse;

      return this.apiClient.callApi(
        '/verify-batch', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Verify up to 1 million email addresses with one API call
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.xKickboxCallback If a valid URL is specified, Kickbox will send a HTTP **POST**  containing the results of the job to it when the batch verification completes.
     * @param {String} opts.xKickboxFilename The file containing your results will have the specified name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyBatchResponse}
     */
    this.verifyBatch = function(opts) {
      return this.verifyBatchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check the status of a batch email verification job that was started asynchronously via the /verify-batch endpoint
     * 
     * @param {Number} id The id of the job for which to retrieve status. This id is returned when the job is created rather a **PUT **to /verify-batch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyBatchStatusResponse} and HTTP response
     */
    this.verifyBatchStatusWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling verifyBatchStatus");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VerifyBatchStatusResponse;

      return this.apiClient.callApi(
        '/verify-batch/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check the status of a batch email verification job that was started asynchronously via the /verify-batch endpoint
     * 
     * @param {Number} id The id of the job for which to retrieve status. This id is returned when the job is created rather a **PUT **to /verify-batch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyBatchStatusResponse}
     */
    this.verifyBatchStatus = function(id) {
      return this.verifyBatchStatusWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
