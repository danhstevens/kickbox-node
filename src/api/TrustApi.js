/**
 * Kickbox
 * Kickbox API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.12-1
 *
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiError', 'model/TrustError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiError'), require('../model/TrustError'));
  } else {
    // Browser globals (root is window)
    if (!root.Kickbox) {
      root.Kickbox = {};
    }
    root.Kickbox.TrustApi = factory(root.Kickbox.ApiClient, root.Kickbox.ApiError, root.Kickbox.TrustError);
  }
}(this, function(ApiClient, ApiError, TrustError) {
  'use strict';

  /**
   * Trust service.
   * @module api/TrustApi
   * @version 3.0.0
   */

  /**
   * Constructs a new TrustApi. 
   * @alias module:api/TrustApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * API call to Kickbox to check that the Trust token is real (and not fraudulent). Once this endpoint returns a successful response then you&#39;re good to complete the rest of the sign-up process.
     * 
     * @param {String} appId Find this on the connect page for your app. This is the same for both sandbox and production modes.
     * @param {String} token The token provided from the front-end library.
     * @param {String} email The email of the user signing up.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.validateWithHttpInfo = function(appId, token, email) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling validate");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling validate");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling validate");
      }


      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'token': token,
        'email': email
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trust/app/{app_id}/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * API call to Kickbox to check that the Trust token is real (and not fraudulent). Once this endpoint returns a successful response then you&#39;re good to complete the rest of the sign-up process.
     * 
     * @param {String} appId Find this on the connect page for your app. This is the same for both sandbox and production modes.
     * @param {String} token The token provided from the front-end library.
     * @param {String} email The email of the user signing up.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.validate = function(appId, token, email) {
      return this.validateWithHttpInfo(appId, token, email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
